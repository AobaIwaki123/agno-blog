version: '3.8'

services:
  # Agno Blog Application
  agno-blog:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agno-blog-app
    ports:
      - "8000:8000"
    environment:
      # API Keys (set these in your environment or .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - CO_API_KEY=${CO_API_KEY}
      
      # Database configuration
      - DATABASE_URL=postgresql+psycopg://agno:agno_password@postgres:5432/agno_blog
      
      # Application settings
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - OS_SECURITY_KEY=${OS_SECURITY_KEY:-agno-blog-security-key}
      
      # Logging
      - LOG_LEVEL=INFO
    volumes:
      # Persist database and knowledge base
      - agno_data:/app/data
      - agno_logs:/app/logs
      # Mount templates for development (optional)
      # - ./templates:/app/templates
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - agno-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agno-blog-postgres
    environment:
      POSTGRES_DB: agno_blog
      POSTGRES_USER: agno
      POSTGRES_PASSWORD: agno_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - agno-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agno -d agno_blog"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: agno-blog-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - agno-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: agno-blog-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - agno-blog
    restart: unless-stopped
    networks:
      - agno-network
    profiles:
      - production

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: agno-blog-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - agno-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: agno-blog-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - agno-network
    profiles:
      - monitoring

volumes:
  agno_data:
    driver: local
  agno_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  agno-network:
    driver: bridge